{"version":3,"sources":["components/AppNavbar.js","components/AppHeading.js","components/FilteredTable.js","components/Table.js","components/Charts/searchBar.js","components/Charts/pieChart.js","components/Charts/linePlot.js","components/Charts/barPlot.js","components/Charts/cardLoading.js","components/Charts/legend.js","components/Charts/tabsMenu.js","components/Charts/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Modal","class","id","data-backdrop","data-keyboard","tabindex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","className","href","AppNavbar","Fragment","style","backgroundColor","fontWeight","fontSize","data-toggle","data-target","AppHeading","data","flex","flexDirection","color","marginBottom","fontStyle","marginLeft","item","last_updated","Date","getTime","toFixed","checkDateGlobal","lastupdated","useStyles","makeStyles","theme","root","display","small","width","spacing","height","large","marginRight","format","Intl","NumberFormat","TableHeader","scope","textAlign","aria-haspopup","aria-expanded","Name","list","map","element","key","onClick","changeContinent","name","Cases","TodayCases","Deaths","TodayDeaths","Recovered","Active","Critical","tests","testsPerOneMillion","FilteredTable","dataTable","classes","useState","search","setSearch","tableRows","filter","e","country","toLowerCase","includes","tableBody","Avatar","alt","src","countryInfo","flag","length","checkCountryName","cases","todayCases","checkConfirmedValue","deaths","todayDeaths","checkDeathsValue","recovered","active","critical","colSpan","bgcolor","value","placeholder","onChange","target","dataw","Table","tableData","marginTop","margin","searchBar","borderRadius","SearchBar","selectedCountry","changeValue","Grid","container","direction","justify","alignItems","xs","sm","Autocomplete","fullWidth","options","getOptionLabel","option","defaultValue","handleInputChange","renderInput","params","TextField","variant","label","PieChart","chartData","legend","position","labels","fontFamily","fontColor","stopPropagation","LinePlot","responsive","maintainAspectRatio","title","tooltips","enabled","mode","intersect","scales","xAxes","gridLines","ticks","yAxes","BarPlot","heading","card","transitionDuration","cardTitle","flexWrap","jalignItems","avatar","CardLoading","Card","CardHeader","Skeleton","animation","CardContent","Legend","ar","rr","cfr","TabsMenu","handleChange","slice","dates_chart","paddingLeft","ChartTitle","selectedItem","Chart","error","setError","loading","setLoading","dataCountries","setDataCountries","setList","dates","setDates","timeSeriesData","setTimeSeriesData","setSelectedCountry","setSelectedItem","worldData","setWorldData","pieChartOne","setPieChartOne","pieChartTwo","setPieChartTwo","chartOne","setChartOne","chartTwo","setChartTwo","variableOne","setVariableOne","variableTwo","setVariableTwo","useEffect","getData","a","datasets","fetch","res","json","response","canada_cases_ts","canada_newcases_ts","canada_active_ts","canada_deaths_ts","canada_newdeaths_ts","cases_ca","deaths_ca","active_ca","push","i","newcases_ca","newdeaths_ca","newcases","newdeaths","fill","pointRadius","borderColor","casesData","deathsData","activeData","newCasesData","newDeathsData","countries","monthsDict","countriesInfo","timeSeriesInfo","Promise","all","response1","response2","rawdata1","world_cases","world_newCases","world_deaths","world_recovered","world_active","newCases","obj","NewCases","code","iso2","world_data","sort","rawData2","d","date","indexOf","month","country_name","country_cases","country_newCases","country_deaths","country_newDeaths","country_active","confirmed","newInfections","newFatalities","info","console","log","justifyContent","letterSpacing","continents","total","population","rawData","casespermillion","deathspermillion","App","appData","setAppData","setData","setDataContinents","continent","continent_cases","continent_deaths","continent_recovered","continent_critical","continent_active","continent_newCases","continent_newDeaths","continent_population","continent_casespermillion","continent_deathspermillion","world_casespermillion","world_deathspermillion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b77dcc98.chunk.js","sourcesContent":["import React from \"react\";\r\nimport InfoTwoToneIcon from '@material-ui/icons/InfoTwoTone';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction Modal(){\r\n  return(\r\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-backdrop=\"static\" data-keyboard=\"false\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h4 class=\"modal-title\" id=\"exampleModalLabel\">About</h4>\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <p className='lead mb-4'>This website was created by Saket S Narayan, a third year CS student from Manipal University Jaipur. You can connect with me on Github or LinkedIn.</p>\r\n          <div className='row px-3 d-flex justify-content-center'>\r\n            <div className=\"px-4\">      \r\n              <h2>\r\n                <a className='text-secondary' href=\"https://github.com/saket2508\"><i class=\"fab fa-github\"></i></a>\r\n              </h2>\r\n            </div>\r\n            \r\n            <div className=\"px-4\">\r\n              <h2>\r\n                <a className='text-secondary' href=\"https://www.linkedin.com/in/saket-s-narayan-636158149/\">\r\n                  <i class=\"fab fa-linkedin\"></i>\r\n                </a>\r\n              </h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\n\r\nexport default function AppNavbar(){\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark\" style={{backgroundColor:'#263238'}}>   \r\n        <div className=\"container\">\r\n          <span style={{fontWeight:'600', fontSize:'18px'}} className=\"navbar-brand mb-0\">COVID-19 Dashboard</span>\r\n            <ul class=\"navbar-nav ml-auto\">\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link\" data-toggle=\"modal\" data-target=\"#staticBackdrop\" href=\"#\"><InfoTwoToneIcon style={{fontSize:30}}/></a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n      </nav>\r\n\r\n      <Modal/>\r\n      </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nfunction checkDateGlobal(item){\r\n    let time_rn= new Date().getTime()\r\n    let last_updated= ((time_rn-item)/60000).toFixed(0)\r\n    return <span>Last Updated: {last_updated} mins ago</span>\r\n}\r\n\r\nexport default function AppHeading({ data }){\r\n    return(\r\n        <div className='container-lg shadow-sm pt-1 pl-3 pr-3 pb-1 mb-4 bg-white rounded'>\r\n            <div className='mt-3'>\r\n                <p style={{fontSize:18, fontWeight:'300'}} className=\"mb-2\">\r\n                    See live statistics of the ongoing COVID-19 pandemic that include the current count of cases, fatalities, recovered patients and active infections in all affected countries. You can search for any country from the search bar to see its charts and figures, and the table below it for more info.\r\n                </p>\r\n            </div>\r\n            <div style={{flex:1,flexDirection:'row'}} className='mt-3'>\r\n                <RefreshIcon fontSize=\"small\" style={{color:'#757575', marginBottom:1}}/>\r\n                <span style={{fontStyle:'italic', fontSize:16, fontWeight:'300', marginLeft:2, color:\"#757575\"}} >{checkDateGlobal(data.lastupdated)}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useState, useEffect, Fragment} from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      fontWeight:'600'\r\n    },\r\n    small: {\r\n      width: theme.spacing(3),\r\n      height: theme.spacing(3),\r\n    },\r\n    large: {\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5),\r\n        marginRight:3\r\n      },\r\n  }));\r\n\r\nfunction format(item){\r\n    return new Intl.NumberFormat('en-US').format(item)\r\n}\r\n\r\nfunction TableHeader({ data }){\r\n    const tableheader=(\r\n        <Fragment>\r\n        <thead className='thead-light'>\r\n            <th scope='col' style={{textAlign:'center'}}>\r\n                #\r\n            </th>\r\n            <th scope='col'>        \r\n                Location\r\n            </th>\r\n            <th scope='col'>Confirmed</th>\r\n            <th scope='col'>Deaths</th>\r\n            <th scope='col'>Recovered</th>\r\n            <th scope='col'>Active</th>\r\n            <th scope='col'>Critical</th>\r\n            <th scope='col'>Total Tests</th>\r\n            <th scope='col'>Tests Per Million</th>\r\n\r\n        </thead>\r\n\r\n        <tr className=\"table-warning\">\r\n            <td></td>\r\n            <td id='nowrap' style={{fontWeight:\"600\"}}> \r\n                    <div class=\"btn-group\">\r\n                        <button class=\"btn btn-custom btn-sm shadow-none dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                              <span style={{fontWeight:'600'}}>{data.data.Name}</span>\r\n                        </button>\r\n                        <div class=\"dropdown-menu\">\r\n                            {data.list.map((element) => (\r\n                                <a key={element.id} class=\"dropdown-item\" onClick={() => {\r\n                                    data.changeContinent(element)\r\n                                }}>{element.name}</a>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n            </td>\r\n            <td id='nowrap-r' style={{fontWeight:\"600\"}}>\r\n                    {format(data.data.Cases)}\r\n                    <small><span class=\"badge badge-pill badge-secondary\">{'+'+format(data.data.TodayCases)}</span></small>\r\n            </td>\r\n            <td id='nowrap-r' style={{fontWeight:\"600\"}}>\r\n                    {format(data.data.Deaths)}\r\n                    <small><span class=\"badge badge-pill badge-danger\">{'+'+format(data.data.TodayDeaths)}</span></small>\r\n            </td>\r\n            <td id='nowrap-r' style={{fontWeight:\"600\"}}>\r\n                    {format(data.data.Recovered)}\r\n            </td>\r\n            <td id='nowrap-r' style={{fontWeight:\"600\"}}>{format(data.data.Active)}</td>\r\n            <td id='nowrap-r' style={{fontWeight:\"600\"}}>{format(data.data.Critical)}</td>\r\n            <td id='nowrap-r' style={{fontWeight:\"600\"}}>{data.tests}</td>\r\n            <td id='nowrap-r' style={{fontWeight:\"600\"}}>{data.data.testsPerOneMillion}</td>\r\n        </tr>\r\n        </Fragment>\r\n    );\r\n    return tableheader;\r\n}\r\n\r\n\r\nexport default function FilteredTable({ dataTable }){\r\n\r\n    const classes= useStyles();\r\n\r\n    const [ search, setSearch ] = useState(\"\")\r\n\r\n\r\n    const checkConfirmedValue= (item) =>{\r\n        if(item.todayCases >0){\r\n                return <small><span class=\"badge badge-pill badge-secondary\">{'+'+format(item.todayCases)}</span></small>\r\n        }\r\n    }\r\n\r\n    const checkDeathsValue = (item) =>{\r\n        if(item.todayDeaths >0){\r\n            return <small><span class=\"badge badge-pill badge-danger\">{'+'+format(item.todayDeaths)}</span></small>\r\n        }\r\n    }\r\n\r\n    const checkCountryName = (item) =>{\r\n        if(item.country === \"USA\"){\r\n            item.country = \"United States\"\r\n            return(\r\n                <td>\r\n                    <div className={classes.root}>\r\n                        <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                        <span className=\"my-auto mx-1\">{item.country}</span>\r\n                    </div>\r\n                </td>\r\n            )\r\n        }\r\n        if(item.country === \"UK\"){\r\n            item.country = \"United Kingdom\"\r\n            return(\r\n                <td>\r\n                    <div className={classes.root}>\r\n                        <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                        <span className=\"my-auto mx-1\">{item.country}</span>\r\n                    </div>\r\n                </td>\r\n            )\r\n        }\r\n        if(item.country===\"Lao People's Democratic Republic\"){\r\n            item.country='Laos'\r\n            return(\r\n                <td>\r\n                    <div className={classes.root}>\r\n                        <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                        <span className=\"my-auto mx-1\">{item.country}</span>\r\n                    </div>\r\n                </td>\r\n            )\r\n        }\r\n        if(item.country==='Libyan Arab Jamahiriya'){\r\n            item.country='Libya'\r\n            return(\r\n                <td>\r\n                    <div className={classes.root}>\r\n                        <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                        <span className=\"my-auto mx-1\">{item.country}</span>\r\n                    </div>\r\n                </td>\r\n            )\r\n        }\r\n        if(item.country==='Syrian Arab Republic'){\r\n            item.country='Syria'\r\n            return(\r\n                <td>\r\n                    <div className={classes.root}>\r\n                        <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                        <span className=\"my-auto mx-1\">{item.country}</span>\r\n                    </div>\r\n                </td>\r\n            )\r\n        }\r\n        if(item.country==='S. Korea'){\r\n            item.country=\"South Korea\"\r\n            return(\r\n                <td>\r\n                    <div className={classes.root}>\r\n                        <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                        <span className=\"my-auto mx-1\">{item.country}</span>\r\n                    </div>\r\n                </td>\r\n            )\r\n        }\r\n       if(item.country.length > 10){\r\n        return(\r\n            <td>\r\n                <div className={classes.root}>\r\n                    <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                    <span className=\"my-auto mx-1\">{item.country}</span>\r\n                </div>\r\n            </td>\r\n        )\r\n       }\r\n        if(item.country===\"MS Zaandam\"){\r\n            return <td>{item.country}</td>\r\n        }\r\n        if(item.country===\"Diamond Princess\"){\r\n            return <td>{item.country}</td>\r\n        }\r\n        else{\r\n            return(\r\n                <td>\r\n                    <div className={classes.root}>\r\n                        <Avatar className={classes.large} alt={item.country} src={item.countryInfo.flag}/>\r\n                        <span className=\"my-auto mx-1\">{item.country}</span>\r\n                    </div>\r\n                </td>\r\n            )\r\n        }\r\n    }\r\n\r\n    const tableRows= (\r\n        dataTable.data.filter(e => e.country.toLowerCase().includes(search.toLowerCase()))\r\n    )\r\n\r\n    let id=1\r\n    let tableBody=(\r\n            <tbody>\r\n                    {tableRows.map((item) =>\r\n                        (\r\n                            <tr>\r\n                                <td id='nowrapid'>{id++}</td>\r\n                                    {checkCountryName(item)}\r\n                                <td id='nowrap-r'> {format(item.cases)} \r\n                                    {checkConfirmedValue(item)}\r\n                                </td>\r\n                                <td id='nowrap-r'>{format(item.deaths)}\r\n                                    {checkDeathsValue(item)}\r\n                                </td> \r\n                                {item.recovered != 0 ? <td id='nowrap-r'>{format(item.recovered)}</td> : <td id='nowrap-r'>N/A</td>}\r\n                                <td id='nowrap-r'>{format(item.active)}</td>\r\n                                <td id='nowrap-r'>{format(item.critical)}</td>\r\n                                <td id='nowrap-r'>{format(item.tests)}</td>\r\n                                <td id='nowrap-r'>{format(item.testsPerOneMillion)}</td>\r\n                               \r\n                            </tr>\r\n                        ))}\r\n            </tbody>\r\n    )\r\n\r\n    if(tableRows.length===0){\r\n        tableBody=(\r\n                <td colSpan='7' bgcolor='#ffcdd2'>\r\n                    <p className='small text-danger'>NO MATCHING RECORDS FOUND</p>\r\n                </td>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className='FilteredTable'>\r\n        <div className='container-lg'>\r\n            <div class=\"d-flex justify-content-start mb-3\">\r\n                <div class='col-lg-4 col-sm-9 mt-2'>\r\n                <input id=\"search\" class=\"form-control form-control-md\" \r\n                            value={search} \r\n                            type=\"search\"\r\n                            placeholder=\"Search...\"\r\n                            aria-label=\"Search\"\r\n                            onChange={ e => setSearch(e.target.value) }/>\r\n                </div>\r\n               \r\n            </div>\r\n        </div>\r\n          <div className='table-responsive-lg'>\r\n                <table id='statstable' class=\"table table-bordered table-hover table-sm\">\r\n                    <TableHeader {...{\r\n                        data:{\r\n                            changeContinent: dataTable.changeContinent,\r\n                            list:  dataTable.list,\r\n                            data:  dataTable.dataw\r\n                        }\r\n                    }} />\r\n                    {tableBody}\r\n                </table>\r\n            </div>   \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React, { Component} from \"react\"\r\nimport FilteredTable from './FilteredTable'\r\n\r\n\r\nexport default function Table({ tableData }){\r\n    return(\r\n        <div className='container-md'>\r\n            <FilteredTable {...{\r\n                dataTable:{\r\n                    changeContinent:tableData.changeContinent,\r\n                    data:tableData.data, \r\n                    dataw:tableData.dataw,\r\n                    list:tableData.list\r\n                }\r\n            }}/>\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { borders } from '@material-ui/system';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(2),\r\n    // width: 300,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  margin:{\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  searchBar:{\r\n      borderRadius:\"25px\",\r\n  }\r\n}));\r\n\r\nconst SearchBar = ({selectedCountry, changeValue, list}) => {\r\n    const classes = useStyles();\r\n\r\n    const handleInputChange = (value) => {\r\n        if(value!==null){\r\n            //console.log(value)\r\n            changeValue(value)\r\n        }\r\n    }\r\n    return(\r\n    //     <div className='row mt-2'>\r\n    //         <div className=\"container d-flex col-7 justify-content-center\">\r\n    //             <select id=\"select\" value={selectedCountry} onChange={(event) => changeValue(event)} style={{borderRadius:50}} className=\"custom-select custom-select-md\">\r\n    //                     {list.map((item) => {\r\n    //                         if(item===\"India\"){\r\n    //                              return <option selected>{item}</option>\r\n    //                         }\r\n    //                         else{\r\n    //                             return <option value={item}>{item}</option>\r\n    //                         }\r\n    //                     })}\r\n    //             </select>\r\n    //         </div>\r\n    // </div>\r\n            <Grid className={classes.margin}\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\">\r\n                    <Grid item xs={9} sm={6}>                   \r\n                            <Autocomplete\r\n                                fullWidth={true}\r\n                                className=\"inputRounded\"\r\n                                // size=\"small\"\r\n                                id=\"country-select-demo\"\r\n                                options={list}\r\n                                getOptionLabel={(option) => option}\r\n                                defaultValue=\"Canada\"\r\n                                onChange={(e, value) => handleInputChange(value)}\r\n                                renderInput={(params) => (\r\n                                    <TextField {...params} \r\n                                        borderRadius={16}\r\n                                        variant=\"outlined\" \r\n                                        label=\"Search\" \r\n                                        placeholder=\"Search...\"\r\n                                         />\r\n                                )}\r\n                            />\r\n                    </Grid>\r\n            </Grid>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\nimport {Bar, Line, Doughnut} from 'react-chartjs-3';\r\n\r\nconst PieChart = ({...chartData}) => {\r\n    return(\r\n        <div className='col-lg-6 col-sm-12 mb-3'>\r\n                                    <div className='chart flex-fill'>\r\n                                    <Doughnut\r\n                                        data={chartData}\r\n                                        options={{\r\n                                            legend:{\r\n                                                display:false,\r\n                                                position:\"bottom\",\r\n                                                labels:{\r\n                                                    fontFamily:  \"'Noto Sans JP', sans-serif\",\r\n                                                    fontColor:'#000'\r\n                                                },\r\n                                                onClick: (e) => e.stopPropagation()\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    </div>\r\n                                </div>\r\n    )\r\n}\r\n\r\nexport default PieChart","import React from 'react';\r\nimport {Bar, Line, Doughnut} from 'react-chartjs-3';\r\n\r\nconst LinePlot = ({...chartData}) => {\r\n    return( \r\n        <div className='chart col-12'>\r\n                            <div id='chart' className=\"chart-container\">\r\n                            <Line\r\n                                    data={chartData}\r\n                                    options={{\r\n                                        responsive:true,\r\n                                        maintainAspectRatio:false,\r\n                                        title:{\r\n                                            display:false,\r\n                                            //text:'Largest Cities In '+this.props.location,\r\n                                            fontSize:25\r\n                                        },\r\n                                        legend:{\r\n                                            display:false,\r\n                                            position:\"top\",\r\n                                            labels:{\r\n                                                fontFamily:  \"'Noto Sans JP', sans-serif\",\r\n                                                fontColor:'#000'\r\n                                            },\r\n                                            onClick: (e) => e.stopPropagation()\r\n                                        },\r\n                                        tooltips:{\r\n                                            enabled:true,\r\n                                            mode:'index',\r\n                                            intersect:false\r\n                                        },\r\n                                        scales: {\r\n                                            xAxes: [\r\n                                            {\r\n                                                gridLines: {\r\n                                                    display:false\r\n                                                },\r\n                                                ticks:{\r\n                                                        fontFamily:  \"'Noto Sans JP', sans-serif\",\r\n                                                        fontSize:'12',\r\n                                                        fontColor: '#000',\r\n                                                    }\r\n                                                }\r\n                                            ],\r\n                                            yAxes: [\r\n                                                {\r\n                                                    ticks:{\r\n                                                            fontFamily:  \"'Noto Sans JP', sans-serif\",\r\n                                                            fontSize:'12',\r\n                                                            fontColor: '#000',\r\n                                                        }\r\n                                                    }\r\n                                                ]\r\n                                            \r\n                                        }\r\n                                    }}\r\n                                    />\r\n                            </div>\r\n                            </div>\r\n    )\r\n}\r\n\r\nexport default LinePlot","import React from 'react';\r\nimport {Bar, Line, Doughnut} from 'react-chartjs-3';\r\n\r\n\r\nconst BarPlot = ({...chartData}) => {\r\n    return(\r\n        <div className='col-12'>\r\n                        <div id='chart' className=\"chart-container\">\r\n                            <Bar\r\n                                    data={chartData}\r\n                                    options={{\r\n                                        tooltips:{\r\n                                            mode:'index',\r\n                                            intersect:false\r\n                                        },\r\n                                        responsive:true,\r\n                                        maintainAspectRatio:false,\r\n                                        title:{\r\n                                            display:false\r\n                                        },\r\n                                        legend:{\r\n                                            display:false,\r\n                                            position:\"top\",\r\n                                            labels:{\r\n                                                fontFamily:  \"'Noto Sans JP', sans-serif\",\r\n                                                fontColor:'#000'\r\n                                            },\r\n                                            onClick: (e) => e.stopPropagation()\r\n                                        },\r\n                                        scales: {\r\n                                            xAxes: [\r\n                                            {\r\n                                                gridLines: {\r\n                                                    display:false\r\n                                                },\r\n                                                //barPercentage: 0.4,\r\n                                                ticks:{\r\n                                                        fontFamily:  \"'Noto Sans JP', sans-serif\",\r\n                                                        fontSize:'12',\r\n                                                        fontColor: '#000',\r\n                                                    }\r\n                                                }\r\n                                            ],\r\n                                            yAxes: [\r\n                                                {\r\n                                                    ticks:{\r\n                                                            fontFamily:  \"'Noto Sans JP', sans-serif\",\r\n                                                            fontSize:'12',\r\n                                                            fontColor: '#000',\r\n                                                        }\r\n                                                    }\r\n                                                ]\r\n                                            \r\n                                        }\r\n                                    }}\r\n                                    />\r\n                            </div>\r\n                        </div>\r\n    )\r\n}\r\n\r\nexport default BarPlot;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        marginTop:40,\r\n        marginBottom:40,\r\n    },\r\n    heading:{\r\n        marginBottom:1,\r\n        flex:1,\r\n        flexDirection:\"row\"\r\n    },\r\n    title:{\r\n        fontSize: 14,\r\n    },\r\n    card:{\r\n        display: 'block',\r\n        width: '100%',\r\n        transitionDuration: '0.3s',\r\n        height: '100%'\r\n    },\r\n    cardTitle:{\r\n        display:'flex',\r\n        flexDirection:'row',\r\n        flexWrap:'wrap',\r\n        jalignItems:'center'\r\n    },\r\n    avatar:{\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5),\r\n        marginLeft: theme.spacing(0.65),\r\n        marginRight: theme.spacing(0.65),\r\n        marginTop:theme.spacing(0.5)\r\n    },\r\n  }));\r\n\r\nconst CardLoading = () => {\r\n    const classes= useStyles()\r\n    return(\r\n        <div style={{marginTop:30, marginBottom: 60}} className=\"container-lg\">\r\n        <Grid container spacing={5}>\r\n            <Grid item xs={12} sm={6}>\r\n                <Card variant=\"outlined\" className={classes.card}>\r\n                    <CardHeader\r\n                        title={ \r\n                            <Skeleton animation=\"wave\" height={15} style={{ marginBottom: 6 }} width=\"50%\" />\r\n                        }/>\r\n                    <CardContent>\r\n                    <React.Fragment>\r\n                            <Skeleton animation=\"wave\" height={100} variant=\"rect\" width=\"100%\" style={{ marginBottom: 20 }} />  \r\n\r\n                            <Skeleton animation=\"wave\" height={10} variant=\"rect\" style={{ marginBottom: 5 }} />\r\n                            <Skeleton animation=\"wave\" height={10} variant=\"rect\" style={{ marginBottom: 5 }} />\r\n                            <Skeleton animation=\"wave\" height={10} variant=\"rect\" style={{ marginBottom: 15 }} />\r\n\r\n\r\n                        </React.Fragment>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n            <CardHeader\r\n                       title={ \r\n                        <Skeleton animation=\"wave\" height={15} style={{ marginBottom: 6 }} width=\"50%\" />\r\n                    }/>\r\n                    <CardContent>\r\n                    <React.Fragment>\r\n                            <Skeleton animation=\"wave\" height={100} variant=\"rect\" width=\"100%\" style={{ marginBottom: 20 }} />  \r\n\r\n                            <Skeleton animation=\"wave\" height={10} variant=\"rect\" style={{ marginBottom: 5 }} />\r\n                            <Skeleton animation=\"wave\" height={10} variant=\"rect\" style={{ marginBottom: 5 }} />\r\n                            <Skeleton animation=\"wave\" height={10} variant=\"rect\" style={{ marginBottom: 15 }} />\r\n                        </React.Fragment>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n            <CardHeader\r\n                        title={ \r\n                            <Skeleton animation=\"wave\" height={15} style={{ marginBottom: 6 }} width=\"50%\" />\r\n                        }/>\r\n                    <CardContent>\r\n                        <React.Fragment>\r\n                            <Skeleton animation=\"wave\" height={200} variant=\"rect\" style={{ marginBottom: 5 }} /> \r\n                        </React.Fragment>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n            <CardHeader\r\n                        title={ \r\n                            <Skeleton animation=\"wave\" height={15} style={{ marginBottom: 6 }} width=\"50%\" />\r\n                        }/>\r\n                    <CardContent>\r\n                    <React.Fragment>\r\n                            <Skeleton animation=\"wave\" height={200} variant=\"rect\" style={{ marginBottom: 5 }} />  \r\n                        </React.Fragment>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardLoading","import React from 'react';\r\n\r\nfunction format(item){\r\n    return new Intl.NumberFormat('en-US').format(item)\r\n}\r\n\r\n\r\nconst Legend = (data) =>{\r\n    return(\r\n        <div className='row'>\r\n        <div className='col-12'>\r\n            <ul className=\"list-group list-group-flush\">\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center\" style={{fontWeight:'600',color:'#616161'}}>\r\n                    <div className='title'>\r\n                        <div className='dot-1'></div>\r\n                        <h6 style={{fontWeight:'400'}}>Active</h6>\r\n                    </div>\r\n                    <div className='count'>\r\n                        <h6 style={{fontWeight:'600'}}>{format(data.Active)}\r\n                            <small className='text-muted'> ({data.ar} %)</small>\r\n                        </h6>\r\n                    </div>\r\n                </li>\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center\" style={{fontWeight:'600',color:'#616161'}}>\r\n                    <div className='title'>\r\n                        <div className='dot-2'></div>\r\n                        <h6 style={{fontWeight:'400'}}>Recovered</h6>\r\n                    </div>\r\n                    <span className='count'>\r\n                       {data.Recovered!=0 ? <h6 style={{fontWeight:'600'}}>{format(data.Recovered)}\r\n                            <small className='text-muted'> ({data.rr} %)</small>\r\n                        </h6> : <h6 style={{fontWeight:'600'}}>N/A\r\n                            <small className='text-muted'> ({data.rr} %)</small>\r\n                        </h6>}\r\n                    </span>\r\n                </li>\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center\" style={{fontWeight:'600',color:'#616161'}}>\r\n                    <div className='title'>\r\n                        <div className='dot-3'></div>\r\n                        <h6 style={{fontWeight:'400'}}>Fatalities</h6>\r\n                    </div>\r\n                    <span className='count'>\r\n                        <h6 style={{fontWeight:'600'}}>{format(data.Deaths)}\r\n                        <small className='text-muted'> ({data.cfr} %)</small>\r\n                        </h6>                                            \r\n                    </span>\r\n                </li>                                            \r\n            </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend","import React from 'react';\r\n\r\n\r\nconst TabsMenu = ({data, handleChange}) =>{\r\n    return(\r\n        <div className='col-12 mb-3'>\r\n                            <ul className=\"nav nav-tabs nav-tabs-card nav-tabs-xs d-flex align-content-center\">\r\n                            {data.slice(0,1).map(item => (\r\n                                    <li className='nav-item'>\r\n                                        <a className='nav-link active' key={item.id} data-toggle=\"tab\" href=\"#\" onClick={() => handleChange(item)} >{item.name}</a>\r\n                                    </li>\r\n                                ))}\r\n                                {data.slice(1).map(item => (\r\n                                    <li className='nav-item'>\r\n                                        <a className='nav-link' key={item.id} data-toggle=\"tab\" href=\"#\" onClick={() => handleChange(item)} >{item.name}</a>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>   \r\n                        </div>\r\n    )\r\n}\r\n\r\nexport default TabsMenu","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchBar from './searchBar';\r\nimport PieChart from './pieChart';\r\nimport LinePlot from './linePlot';\r\nimport BarPlot from './barPlot';\r\nimport CardLoading from './cardLoading';\r\nimport Legend from './legend';\r\nimport TabsMenu from './tabsMenu';\r\nimport './chart.css';\r\nimport { CardHeader } from '@material-ui/core';\r\n\r\nconst dates_chart=[]\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        marginTop:40,\r\n        marginBottom:40,\r\n    },\r\n    heading:{\r\n        marginBottom:1,\r\n        flex:1,\r\n        flexDirection:\"row\"\r\n    },\r\n    title:{\r\n        fontSize: 14,\r\n    },\r\n    card:{\r\n        display: 'block',\r\n        width: '100%',\r\n        transitionDuration: '0.3s',\r\n        height: '100%'\r\n    },\r\n    cardTitle:{\r\n        marginBottom:0,\r\n        display:'flex',\r\n        flexDirection:'row',\r\n        flexWrap:'wrap',\r\n        alignItems:'center',\r\n    },\r\n    avatar:{\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5),\r\n        marginLeft: theme.spacing(0.65),\r\n    },\r\n  }));\r\n\r\nfunction format(item){\r\n    return new Intl.NumberFormat('en-US').format(item)\r\n}\r\n\r\nconst TodayCases = ({data}) => {\r\n    if(data===0){\r\n        return<div></div>\r\n    }\r\n    else{\r\n        return(\r\n            <div style={{display:'flex', flexWrap:'wrap', flexDirection:'row', paddingLeft:2, marginTop:2,alignItems:'center'}}>\r\n                <div style={{color:'#9e9e9e', fontWeight:'600', fontSize:'10'}}>+{format(data)}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ChartTitle = ({selectedCountry, selectedItem}) =>{\r\n    const classes= useStyles()\r\n    return(\r\n        <div>\r\n            <div className={classes.cardTitle}>\r\n                {/* <Typography variant=\"h6\" style={{fontWeight:'400'}}>COVID-19: {selectedCountry} Stats</Typography> */}\r\n                <div style={{fontWeight:'400', fontSize:'19px'}}>COVID-19: {selectedCountry} Stats</div>\r\n                <Avatar src={selectedItem.flag} className={classes.avatar} alt=\"flag-icon\"/>\r\n                {/* <img src={selectedItem.flag} style={{height:24, width:32}}/> */}\r\n                {/* <img className='ml-1' src={`https://www.countryflags.io/${selectedItem.code}/flat/32.png`}></img> */}\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n }\r\n\r\nexport default function Chart(){\r\n    \r\n    //const dates=[]\r\n    const [ error, setError ]= useState(false)\r\n    const [ loading, setLoading ]= useState(true)\r\n\r\n    //general info of every country(cases, deaths, etc)\r\n    const [ dataCountries, setDataCountries ]= useState({})\r\n    const [ list, setList ]= useState([])\r\n\r\n    const [ dates, setDates ]= useState([])\r\n\r\n    //time-series data for every country\r\n    const [ timeSeriesData, setTimeSeriesData ] = useState({})\r\n\r\n    //self-explanatory\r\n    const [ selectedCountry, setSelectedCountry ]= useState(\"Canada\")\r\n    const [ selectedItem, setSelectedItem ]= useState({})\r\n    const [ worldData, setWorldData ]= useState({})\r\n\r\n    const [ pieChartOne, setPieChartOne ]= useState({})\r\n    const [ pieChartTwo, setPieChartTwo ]= useState({})\r\n    const [ chartOne, setChartOne ]= useState({})\r\n    const [ chartTwo, setChartTwo ]= useState({})\r\n\r\n    const [ variableOne, setVariableOne ]= useState(\"Cases\")\r\n    const [ variableTwo, setVariableTwo ]= useState(\"New Cases\")\r\n\r\n    const options= [\r\n        {\r\n            id:1,\r\n            name:'Cases',\r\n        },\r\n        {\r\n            id:2,\r\n            name:'Deaths',\r\n        },\r\n        {\r\n            id:3,\r\n            name:'Active',\r\n        },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    },[])\r\n\r\n    const changeValue = async(value) => {\r\n        let key= \"\"\r\n        if(value!==\"\"){\r\n            key = value\r\n        }\r\n        if(key===\"\"){\r\n            //console.log('empty input')\r\n        }\r\n        else if(key===\"Canada\"){\r\n            setSelectedCountry(key)\r\n            setSelectedItem(dataCountries[key])\r\n\r\n            setPieChartTwo({\r\n                datasets: [{\r\n                    data: [dataCountries[\"Canada\"].Active,\r\n                    dataCountries[\"Canada\"].Recovered,\r\n                    dataCountries[\"Canada\"].Deaths],\r\n                    backgroundColor:['#42a5f5','#9ccc65','#ff7043']\r\n                }],\r\n                labels: ['Active','Recovered','Deaths']\r\n            })\r\n\r\n            let res= await fetch(\"https://pomber.github.io/covid19/timeseries.json\")\r\n            let response= await res.json()\r\n            let canada_cases_ts=[] \r\n            let canada_newcases_ts=[] \r\n            let canada_active_ts= []\r\n            let canada_deaths_ts=[] \r\n            let canada_newdeaths_ts=[] \r\n\r\n            response['Canada'].map((item) => {\r\n                let cases_ca=item['confirmed']\r\n                let deaths_ca= item['deaths']\r\n                let recovered_ca= item['recovered']\r\n                let active_ca= cases_ca-recovered_ca-deaths_ca\r\n                canada_cases_ts.push(cases_ca) \r\n                canada_deaths_ts.push(deaths_ca) \r\n                canada_active_ts.push(active_ca) \r\n            })\r\n\r\n            for(let i=0;i<canada_cases_ts.length-1;i++){\r\n                let newcases_ca= canada_cases_ts[i+1]-canada_cases_ts[i]\r\n                let newdeaths_ca= canada_deaths_ts[i+1]-canada_deaths_ts[i]\r\n                canada_newcases_ts.push(newcases_ca)\r\n                canada_newdeaths_ts.push(newdeaths_ca)\r\n            }\r\n\r\n            const canada_ts= {\r\n                cases: canada_cases_ts,\r\n                deaths: canada_deaths_ts,\r\n                active: canada_active_ts,\r\n                newcases: canada_newcases_ts,\r\n                newdeaths: canada_newdeaths_ts,\r\n            }\r\n\r\n            if(variableOne===\"Cases\"){\r\n                setChartOne({\r\n                    labels: dates,\r\n                        datasets:[\r\n                          {\r\n                                fill:true,\r\n                                pointRadius:0,\r\n                                borderColor:'#424242',\r\n                                label:'Total Cases',\r\n                                data:  canada_cases_ts,\r\n                                backgroundColor:'#f5f5f5'\r\n                          }\r\n                        ]\r\n                })\r\n            }\r\n            else if(variableOne===\"Deaths\"){\r\n                setChartOne({\r\n                    labels: dates,\r\n                        datasets:[\r\n                          {\r\n                            fill:true,\r\n                            pointRadius:0,\r\n                            borderColor:'#ff7043',\r\n                            label:'Total Deaths',\r\n                            data: canada_deaths_ts,\r\n                            backgroundColor:'#fbe9e7'\r\n                          }\r\n                        ]\r\n                })\r\n            }\r\n            else{\r\n                setChartOne({\r\n                    labels: dates,\r\n                        datasets:[\r\n                          {\r\n                            fill:true,\r\n                            pointRadius:0,\r\n                            borderColor:'#1e88e5',\r\n                            label:'Active Infections',\r\n                            data: canada_active_ts,\r\n                            backgroundColor:'#e3f2fd'\r\n                          }\r\n                        ]\r\n                })\r\n            }\r\n\r\n            if(variableTwo===\"New Cases\"){\r\n                setChartTwo({\r\n                    labels: dates.slice(1,dates.length),\r\n                        datasets:[\r\n                          {\r\n                            fill:false,\r\n                            borderColor:'#757575',//gray border\r\n                            label:'New Infections',\r\n                            data: (canada_newcases_ts),\r\n                            backgroundColor:'#757575'//gray bg\r\n                          }\r\n                        ]\r\n                })\r\n            }\r\n            else{\r\n                setChartTwo({\r\n                    labels: dates.slice(1,dates.length),\r\n                        datasets:[\r\n                          {\r\n                            fill:false,\r\n                            borderColor:'#ff7043',\r\n                            label:'New Fatalities',\r\n                            data: (canada_newdeaths_ts),\r\n                            backgroundColor:'#ff5722'\r\n                          }\r\n                        ]\r\n                })\r\n            }\r\n\r\n        }\r\n        else{\r\n            setSelectedCountry(key)\r\n            setSelectedItem(dataCountries[key])\r\n\r\n            setPieChartTwo({\r\n                datasets: [{\r\n                    data: [dataCountries[key].Active,\r\n                    dataCountries[key].Recovered,\r\n                    dataCountries[key].Deaths],\r\n                    backgroundColor:['#42a5f5','#9ccc65','#ff7043']\r\n                }],\r\n                labels: ['Active','Recovered','Deaths']\r\n            })\r\n\r\n        if(variableOne===\"Cases\"){\r\n            setChartOne({\r\n                labels: dates,\r\n                    datasets:[\r\n                      {\r\n                            fill:true,\r\n                            pointRadius:0,\r\n                            borderColor:'#424242',\r\n                            label:'Total Cases',\r\n                            data:  timeSeriesData[key].casesData,\r\n                            backgroundColor:'#f5f5f5'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n        else if(variableOne===\"Deaths\"){\r\n            setChartOne({\r\n                labels: dates,\r\n                    datasets:[\r\n                      {\r\n                        fill:true,\r\n                        pointRadius:0,\r\n                        borderColor:'#ff7043',\r\n                        label:'Total Deaths',\r\n                        data: timeSeriesData[key].deathsData,\r\n                        backgroundColor:'#fbe9e7'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n        else{\r\n            setChartOne({\r\n                labels: dates,\r\n                    datasets:[\r\n                      {\r\n                        fill:true,\r\n                        pointRadius:0,\r\n                        borderColor:'#1e88e5',\r\n                        label:'Active Infections',\r\n                        data: timeSeriesData[key].activeData,\r\n                        backgroundColor:'#e3f2fd'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n\r\n        if(variableTwo===\"New Cases\"){\r\n            setChartTwo({\r\n                labels: dates.slice(1,dates.length),\r\n                    datasets:[\r\n                      {\r\n                        fill:false,\r\n                        borderColor:'#757575',//gray border\r\n                        label:'New Infections',\r\n                        data: (timeSeriesData[key].newCasesData),\r\n                        backgroundColor:'#757575'//gray bg\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n        else{\r\n            setChartTwo({\r\n                labels: dates.slice(1,dates.length),\r\n                    datasets:[\r\n                      {\r\n                        fill:false,\r\n                        borderColor:'#ff7043',\r\n                        label:'New Fatalities',\r\n                        data: (timeSeriesData[key].newDeathsData),\r\n                        backgroundColor:'#ff5722'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n        }\r\n    }\r\n\r\n    const changeCumulativeVariable = (item) => {\r\n        if(item.id===1){\r\n            setVariableOne(\"Cases\")\r\n            setChartOne({\r\n                labels: dates,\r\n                    datasets:[\r\n                      {\r\n                            fill:true,\r\n                            pointRadius:0,\r\n                            borderColor:'#424242',\r\n                            label:'Total Cases',\r\n                            data:  timeSeriesData[selectedCountry].casesData,\r\n                            backgroundColor:'#f5f5f5'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n        if(item.id===2){\r\n            setVariableOne(\"Deaths\")\r\n            setChartOne({\r\n                labels: dates,\r\n                    datasets:[\r\n                      {\r\n                        fill:true,\r\n                        pointRadius:0,\r\n                        borderColor:'#ff7043',\r\n                        label:'Total Deaths',\r\n                        data: timeSeriesData[selectedCountry].deathsData,\r\n                        backgroundColor:'#fbe9e7'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n        if(item.id===3){\r\n            setVariableOne(\"Active Cases\")\r\n            setChartOne({\r\n                labels: dates,\r\n                    datasets:[\r\n                      {\r\n                        fill:true,\r\n                        pointRadius:0,\r\n                        borderColor:'#1e88e5',\r\n                        label:'Active Infections',\r\n                        data: timeSeriesData[selectedCountry].activeData,\r\n                        backgroundColor:'#e3f2fd'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeDailyVariable = (item) => {\r\n        if(item.id===1){\r\n            setVariableTwo(\"New Cases\")\r\n            setChartTwo({\r\n                labels: dates.slice(1,dates.length),\r\n                    datasets:[\r\n                      {\r\n                        fill:false,\r\n                        borderColor:'#757575',//gray border\r\n                        label:'New Infections',\r\n                        data: (timeSeriesData[selectedCountry].newCasesData),\r\n                        backgroundColor:'#757575'//gray bg\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n        else{\r\n            setVariableTwo(\"New Deaths\")\r\n            setChartTwo({\r\n                labels: dates.slice(1,dates.length),\r\n                    datasets:[\r\n                      {\r\n                        fill:false,\r\n                        borderColor:'#ff7043',\r\n                        label:'New Fatalities',\r\n                        data: (timeSeriesData[selectedCountry].newDeathsData),\r\n                        backgroundColor:'#ff5722'\r\n                      }\r\n                    ]\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    const getData= async() => {\r\n        //list to store names of countries\r\n        // setLoading(true)\r\n\r\n        const countries=[]\r\n        const monthsDict= {'1':'Jan','2':'Feb','3':'Mar','4':'Apr','5':'May','6':'Jun','7':'Jul','8':'Aug','9':'Sep','10':'Oct','11':'Nov','12':'Dec'}\r\n\r\n        let countriesInfo={}\r\n        const timeSeriesInfo={}\r\n\r\n        try{\r\n            const [ response1, response2 ]= await Promise.all([\r\n                fetch('https://corona.lmao.ninja/v2/countries?sort=cases'),\r\n                fetch('https://pomber.github.io/covid19/timeseries.json')\r\n            ])\r\n    \r\n            const rawdata1= await response1.json()\r\n    \r\n            let world_cases=0\r\n            let world_newCases=0\r\n            let world_deaths=0\r\n            let world_recovered=0\r\n            let world_active=0\r\n    \r\n            rawdata1.map((element) => {\r\n                let name= element.country\r\n    \r\n                if(name=== \"S. Korea\"){\r\n                    name= \"South Korea\"\r\n                }\r\n\r\n                if(name===\"Syrian Arab Republic\"){\r\n                    name=\"Syria\"\r\n                }\r\n\r\n                if(name===\"Lao People's Democratic Republic\"){\r\n                    name=\"Laos\"\r\n                }\r\n                \r\n                countries.push(name)\r\n                let cases= element.cases\r\n                let newCases = element.todayCases\r\n                let deaths= element.deaths\r\n                let active= element.active\r\n                let recovered= element.recovered\r\n    \r\n                world_cases+= cases\r\n                world_newCases+= newCases\r\n                world_deaths+= deaths\r\n                world_recovered+= recovered\r\n                world_active+= active\r\n    \r\n                let obj={\r\n                    Cases:cases,\r\n                    NewCases:newCases,\r\n                    Deaths:deaths,\r\n                    Recovered:recovered,\r\n                    Active:active,\r\n                    code: element.countryInfo.iso2,\r\n                    flag: element.countryInfo.flag,\r\n                    cfr: ((deaths/cases)*100).toFixed(1),\r\n                    rr: ((recovered/cases)*100).toFixed(1),\r\n                    ar: ((active/cases)*100).toFixed(1),\r\n                }\r\n    \r\n                countriesInfo[name]= obj\r\n            })\r\n    \r\n            const world_data={\r\n                Cases: world_cases,\r\n                NewCases: world_newCases,\r\n                Deaths: world_deaths,\r\n                Recovered: world_recovered,\r\n                Active: world_active,\r\n                cfr: ((world_deaths/world_cases)*100).toFixed(1),\r\n                rr: ((world_recovered/world_cases)*100).toFixed(1),\r\n                ar: ((world_active/world_cases)*100).toFixed(1),\r\n            }\r\n    \r\n            countries.sort()\r\n            setList(countries)\r\n    \r\n            const rawData2 = await response2.json()\r\n            \r\n            rawData2[\"Afghanistan\"].map((item) => {\r\n                let m= \"\"\r\n                let d= item.date.slice(item.date.indexOf('-', 5)+1,item.date.length)\r\n                // let month= item.date.slice(5,6)\r\n                let month = item.date.slice(5, item.date.indexOf('-', 5))\r\n                m = monthsDict[month]\r\n                let date =m+ ' '+d\r\n                dates_chart.push(date)\r\n               //console.log(date)\r\n            })\r\n    \r\n            setDates(dates_chart.slice(dates_chart.length/2))\r\n    \r\n            for(let key in rawData2){\r\n    \r\n                let country_name= key\r\n                if(country_name===\"US\"){\r\n                    country_name= \"USA\"\r\n                }\r\n                if(country_name===\"United Kingdom\"){\r\n                    country_name=\"UK\"\r\n                }\r\n\r\n                if(country_name===\"Korea, South\"){\r\n                    country_name=\"South Korea\"\r\n                }\r\n                if(country_name===\"Taiwan*\"){\r\n                    country_name=\"Taiwan\"\r\n                }\r\n                if(country_name===\"United Arab Emirates\"){\r\n                    country_name=\"UAE\"\r\n                }\r\n\r\n                if(country_name===\"West Bank and Gaza\"){\r\n                    country_name=\"Palestine\"\r\n                }\r\n                if(country_name===\"Syrian Arab Republic\"){\r\n                    country_name=\"Syria\"\r\n                }\r\n    \r\n                let country_cases=[]\r\n                let country_newCases=[]\r\n                let country_deaths=[]\r\n                let country_newDeaths=[]\r\n                let country_active=[]\r\n                rawData2[key].map((item) => {\r\n                    country_cases.push(item.confirmed)\r\n                    country_deaths.push(item.deaths)\r\n                    country_active.push(item.confirmed-item.deaths-item.recovered)\r\n                })\r\n    \r\n                for(let i=1;i<=country_cases.length-1;i++){\r\n                    let newInfections= country_cases[i]-country_cases[i-1]\r\n                    let newFatalities= country_deaths[i]-country_deaths[i-1]\r\n                    country_newCases.push(newInfections)\r\n                    country_newDeaths.push(newFatalities)\r\n                }\r\n    \r\n                let info={\r\n                    casesData: country_cases,\r\n                    deathsData: country_deaths,\r\n                    activeData: country_active,\r\n                    newCasesData: country_newCases,\r\n                    newDeathsData: country_newDeaths\r\n                }\r\n    \r\n                timeSeriesInfo[country_name]= info\r\n            }\r\n            //console.log(countriesInfo)\r\n            setDataCountries(countriesInfo)\r\n            setTimeSeriesData(timeSeriesInfo)\r\n            setSelectedItem(countriesInfo[\"Canada\"])\r\n            setWorldData(world_data)\r\n            //console.log(timeSeriesInfo)\r\n            setPieChartOne({\r\n                datasets: [{\r\n                    data: [world_data.Active,\r\n                        world_data.Recovered,\r\n                        world_data.Deaths],\r\n                        backgroundColor:['#42a5f5','#9ccc65','#ff7043']\r\n                }],\r\n                labels: ['Active','Recovered','Deaths']\r\n            })\r\n    \r\n            setPieChartTwo({\r\n                datasets: [{\r\n                    data: [countriesInfo[\"Canada\"].Active,\r\n                    countriesInfo[\"Canada\"].Recovered,\r\n                    countriesInfo[\"Canada\"].Deaths],\r\n                    backgroundColor:['#42a5f5','#9ccc65','#ff7043']\r\n                }],\r\n                labels: ['Active','Recovered','Deaths']\r\n            })\r\n    \r\n    \r\n            setChartTwo({\r\n                    labels: dates_chart.slice(1,dates_chart.length/2),\r\n                        datasets:[\r\n                          {\r\n                            fill:false,\r\n                            //borderColor:'#9e9e9e',//gray border\r\n                            label:'New Infections',\r\n                            data: (timeSeriesInfo[\"Canada\"].newCasesData),\r\n                            backgroundColor:'#757575'//gray bg\r\n                          }\r\n                        ]\r\n            })\r\n    \r\n            setChartOne({\r\n                labels: dates_chart.slice(dates_chart.length/2),\r\n                    datasets:[\r\n                      {\r\n                            fill:true,\r\n                            pointRadius:0,\r\n                            borderColor:'#424242',\r\n                            label:'Total Cases',\r\n                            data:  timeSeriesInfo[\"Canada\"].casesData,\r\n                            backgroundColor:'#f5f5f5'\r\n                      }\r\n                    ]\r\n            })\r\n\r\n            setLoading(false)\r\n        }\r\n        catch(error){\r\n            setLoading(false)\r\n            setError(true)\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    const classes= useStyles()\r\n\r\n    if(error){\r\n        return(\r\n        <div style={{flex:1,justifyContent:'center',marginTop:50}}>\r\n            <strong>Unable to get plot data. There appears to be a problem with the server :(</strong>\r\n        </div>\r\n        )\r\n    }\r\n    if(loading){\r\n        return(\r\n            <CardLoading/>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <div style={{marginTop: 30, marginBottom: 60}} className=\"container-lg\">\r\n                <Grid container spacing={5}>\r\n                    <Grid item xs={12} sm={6}>\r\n                    <Card variant=\"outlined\" className={classes.card}>\r\n                        <CardHeader\r\n                            title={\r\n                               <div>\r\n                                    <div className={classes.cardTitle}>\r\n                                    {/* <Typography variant=\"h6\" style={{fontWeight:'400'}}>COVID-19: World Figures</Typography>   */}\r\n                                    <div style={{fontWeight:'400', fontSize:'19px'}}>COVID-19: World Figures</div>\r\n                                </div>\r\n                               </div>\r\n                                \r\n                            }    \r\n                        />\r\n                        <CardContent>\r\n                            <div className='row mb-3'>\r\n                                <div className='col-lg-6 col-md-12 mb-2'>\r\n                                    <small className='mb-2' style={{fontWeight:'400', letterSpacing: 1.0}}>Total Coronavirus Cases</small>\r\n                                    <h4 style={{fontWeight:'500'}}>{format(worldData.Cases)}</h4>\r\n                                    <TodayCases data={worldData.NewCases}/>\r\n                                </div>\r\n                                <PieChart {...pieChartOne}/>\r\n                            </div>\r\n                            <Legend {...worldData}/>\r\n                        </CardContent>\r\n                    </Card>\r\n                    </Grid>\r\n    \r\n                    <Grid item xs={12} sm={6}>\r\n                    <Card variant=\"outlined\" className={classes.card}>\r\n                        <CardHeader\r\n                            title={\r\n                                <ChartTitle selectedCountry={selectedCountry} selectedItem={selectedItem}/>\r\n                            }\r\n                        />\r\n                        <CardContent>\r\n                            <div className='row mb-3'>\r\n                                <div className='col-lg-6 col-md-12 mb-2'>\r\n                                    <small className='mb-2' style={{fontWeight:'400', letterSpacing: 1.0}}>Total Coronavirus Cases</small>\r\n                                    <h4 style={{fontWeight:'500'}}>{format(selectedItem.Cases)}</h4>\r\n                                    <TodayCases data={selectedItem.NewCases}/>\r\n                                </div>\r\n                                <PieChart {...pieChartTwo}/>\r\n                            </div>\r\n                            <Legend {...selectedItem}/>\r\n\r\n                            <SearchBar selectedCountry = {selectedCountry} changeValue = {changeValue} list={list}/>\r\n                        </CardContent>\r\n                    </Card>\r\n                    </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                      <Card variant=\"outlined\" className= {classes.card}>\r\n                          <CardHeader\r\n                                title={\r\n                                // <Typography variant=\"h6\" style={{fontWeight:'400'}}>{selectedCountry}: {variableOne} Over Time</Typography>\r\n                                <div style={{fontWeight:'400', fontSize:'19px'}}>{selectedCountry}: {variableOne} Over Time</div>\r\n                                }\r\n                            />\r\n                          <CardContent>\r\n                                <div className=\"row\">\r\n                                    <TabsMenu data= {options} handleChange= {changeCumulativeVariable}/>\r\n                                    <LinePlot {...chartOne}/>\r\n                                </div>\r\n                          </CardContent>\r\n                      </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                      <Card variant=\"outlined\" className= {classes.card}>\r\n                          <CardHeader\r\n                                title={\r\n                                    // <Typography variant=\"h6\" style={{fontWeight:'400'}}>{selectedCountry}: {variableTwo} Over Time</Typography>\r\n                                    <div style={{fontWeight:'400', fontSize:'19px'}}>{selectedCountry}: {variableTwo} Over Time</div>\r\n                                }\r\n                            />\r\n                          <CardContent>\r\n                                <div className=\"row\">\r\n                                    <TabsMenu data= {options.slice(0,-1)} handleChange= {changeDailyVariable}/>\r\n                                    <BarPlot {...chartTwo}/>\r\n                                </div>\r\n                          </CardContent>\r\n                      </Card>\r\n                  </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState, useEffect, Fragment } from \"react\"\r\nimport AppNavbar from './components/AppNavbar'\r\nimport AppHeading from './components/AppHeading'\r\nimport Table from './components/Table'\r\nimport Chart from './components/Charts/Chart'\r\nimport './App.css';\r\n\r\n//FOR CONTINENT DATA\r\nconst continents={\r\n  'North America':{data:[],total:{},population:579000000},\r\n  'South America':{data:[],total:{},population:422500000},\r\n  'Europe':{data:[],total:{},population:741000000},\r\n  'Asia':{data:[],total:{},population:4462000000},\r\n  'Africa':{data:[],total:{},population:1216000000},\r\n  'Australia/Oceania':{data:[],total:{},population:42500000}\r\n}\r\n\r\nconst list=[\r\n  {\r\n    id:0,\r\n    name:'World'\r\n  },\r\n  {\r\n    id:1,\r\n    name:'North America'\r\n  },\r\n  {\r\n    id:2,\r\n    name:'South America'\r\n  },\r\n  {\r\n    id:3,\r\n    name:'Europe'\r\n  },\r\n  {\r\n    id:4,\r\n    name:'Asia'\r\n  },\r\n  {\r\n    id:5,\r\n    name:'Africa'\r\n  },\r\n  {\r\n    id:6,\r\n    name:'Australia/Oceania'\r\n  }\r\n]\r\n\r\nconst world_data=[]\r\n\r\nconst rawData={\r\n        Name: 'World',\r\n        Cases:0,\r\n        Deaths:0,\r\n        Recovered:0,\r\n        Active:0,\r\n        Critical:0,\r\n        TodayCases:0,\r\n        TodayDeaths:0,\r\n        casespermillion:0,\r\n        deathspermillion:0\r\n}\r\n\r\n\r\nexport default function App(){\r\n\r\n  const [ appData, setAppData ]= useState([])\r\n  const [ data, setData ]= useState(rawData)\r\n  const [ dataContinents, setDataContinents ]= useState(continents)\r\n  const [ loading, setLoading ]= useState(false)\r\n  const [ error, setError ]= useState(false)\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    getData()\r\n  },[])\r\n\r\n\r\n  const getData = async() => {\r\n    let deaths=0\r\n    let cases=0\r\n    let recovered=0\r\n    let active=0\r\n    let critical=0\r\n    let todayDeaths=0\r\n    let todayCases=0\r\n\r\n    try{\r\n\r\n      setLoading(true)\r\n\r\n      const res= await fetch('https://corona.lmao.ninja/v2/countries?sort=cases')\r\n      const response = await res.json()\r\n      let lastupdated = response[0][\"updated\"]\r\n\r\n      response.map((item) => {\r\n        world_data.push(item)\r\n\r\n        if(lastupdated < item['updated']){\r\n          lastupdated= item['updated']\r\n        }\r\n\r\n        cases+= item.cases\r\n        deaths+= item.deaths\r\n        active+=  item.active\r\n        critical+= item.critical\r\n        recovered+= item.recovered\r\n        todayDeaths+= item.todayDeaths\r\n        todayCases+= item.todayCases\r\n\r\n        for(let key in continents){\r\n          if(item.continent===key){\r\n            continents[key].data.push(item)\r\n          }\r\n        }\r\n      })\r\n\r\n      for(let key in continents){\r\n        let continent_cases=0\r\n        let continent_deaths=0\r\n        let continent_recovered=0\r\n        let continent_critical=0\r\n        let continent_active=0\r\n        let continent_newCases=0\r\n        let continent_newDeaths=0\r\n\r\n        continents[key].data.map((element) =>{\r\n          continent_cases+= element.cases\r\n          continent_deaths+= element.deaths\r\n          continent_recovered+= element.recovered\r\n          continent_critical+= element.critical\r\n          continent_active+= element.active\r\n          continent_newCases+= element.todayCases\r\n          continent_newDeaths+= element.todayDeaths\r\n        })\r\n\r\n        let continent_population= continents[key].population\r\n        let continent_casespermillion= ((continent_cases/continent_population)*1000000).toFixed(0)\r\n        let continent_deathspermillion=((continent_deaths/continent_population)*1000000).toFixed(0)\r\n\r\n        let obj={Name:key,\r\n          Cases:continent_cases,\r\n          Deaths:continent_deaths,\r\n          Recovered:continent_recovered,\r\n          Active:continent_active,\r\n          Critical:continent_critical,\r\n          TodayCases:continent_newCases,\r\n          TodayDeaths:continent_newDeaths,\r\n          casespermillion:continent_casespermillion,\r\n          deathspermillion:continent_deathspermillion\r\n        }\r\n\r\n        continents[key].total= obj  \r\n      } \r\n\r\n      //For Worldwide data\r\n      const world_population= 7800000000\r\n      const world_casespermillion= ((cases/world_population)*1000000).toFixed(0)\r\n      const world_deathspermillion= ((deaths/world_population)*1000000).toFixed(0)\r\n      \r\n\r\n      rawData.Cases= cases \r\n      rawData.TodayCases= todayCases\r\n      rawData.TodayDeaths= todayDeaths\r\n      rawData.Deaths= deaths \r\n      rawData.Recovered= recovered \r\n      rawData.Active= active \r\n      rawData.Critical= critical \r\n      rawData.casespermillion= world_casespermillion \r\n      rawData.deathspermillion= world_deathspermillion \r\n      rawData.lastupdated= lastupdated \r\n\r\n      setAppData(world_data)\r\n      setData(rawData)\r\n      setDataContinents(continents)\r\n      setLoading(false)\r\n      //console.log(data)\r\n    }\r\n    catch(error){\r\n      setLoading(false)\r\n      setError(true)\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const changeContinent = (item) => {\r\n\r\n    if(item.name==='World'){\r\n      setAppData(world_data)\r\n      setData(rawData)\r\n    }\r\n    if(item.name==='North America'){\r\n      setAppData(continents['North America'].data)\r\n      setData(continents['North America'].total)\r\n    }\r\n    if(item.name==='South America'){\r\n      setAppData(continents['South America'].data)\r\n      setData(continents['South America'].total)\r\n    }\r\n    if(item.name==='Europe'){\r\n      setAppData(continents['Europe'].data)\r\n      setData(continents['Europe'].total)\r\n    }\r\n    if(item.name==='Asia'){\r\n      setAppData(continents['Asia'].data)\r\n      setData(continents['Asia'].total)\r\n    }\r\n    if(item.name==='Africa'){\r\n      setAppData(continents['Africa'].data)\r\n      setData(continents['Africa'].total)\r\n    }\r\n    if(item.name==='Australia/Oceania'){\r\n      setAppData(continents['Australia/Oceania'].data)\r\n      setData(continents['Australia/Oceania'].total)\r\n    }\r\n   \r\n  }\r\n\r\n  if(error){\r\n    return(\r\n      <div>\r\n        <AppNavbar/>\r\n        <div style={{flex:1,justifyContent:'center',marginTop:50}}>\r\n          <strong>Unable to get data. There appears to be a problem with the server :(</strong>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if(loading){\r\n   return(\r\n    <Fragment>\r\n    <AppNavbar/>\r\n    <div style={{marginTop:100}}>\r\n      <h5 style={{fontWeight:400}} className=\"text-muted text-center\">LOADING DATA...</h5>\r\n    </div>\r\n  </Fragment>\r\n   )\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n        <AppNavbar/>\r\n        <AppHeading {...{\r\n          data: rawData\r\n        }}/>\r\n        <Chart/>\r\n          <Table {...{\r\n            tableData:{\r\n              data: appData, \r\n              dataw: data, \r\n              changeContinent: changeContinent,\r\n              list: list\r\n            }\r\n          }}/>\r\n      </Fragment>\r\n  )\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}